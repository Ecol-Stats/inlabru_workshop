---
title: ""
format: 
  html:
    theme:
      light: flatly
      dark: darkly
  PrettyPDF-pdf:
    keep-tex: true
    number-sections: true
embed-resources: true
editor_options: 
  chunk_output_type: console
bibliography: references.bib
---


## Non-Gaussian data

In the next example we will use the `Toyo` data set to illustrate how temporal models can be fit to non-Gaussian data. 

The `Tokyo` data set available in `INLA` contains the recorded days of rain above 1 mm in Tokyo for 2 years, 1983:84. The data set contains the following variables:

-   `y` : number of days with rain

-   `n` : total number of days

-   `time` : day of the year

```{r}
#| message: false
#| warning: false

library(INLA)
library(inlabru)
library(ggplot2)
library(tidyr)


data("Tokyo")
```

A possible observational model for these data is

$$
\begin{aligned}
y_t|\eta_t & \sim\text{Bin}(n_t, p_t) \\
\eta_t &= \text{logit}(p_t),\qquad i = 1,\dots,366
\end{aligned}
$$ 

$$
n_t = \left\{
 \begin{array}{lr}
1, & \text{for}\; 29\; \text{February}\\
2, & \text{other days}
\end{array}\right.
$$ 

$$
y_t =
\begin{cases}
\{0,1\}, & \text{for}\; 29\; \text{February}\\
\{0,1,2\}, & \text{other days}
 \end{cases}
$$

Then, the latent field is given by

$$
\eta_t = \beta_0 + f(\text{time}_t)
$$

-   Where the probability of rain depends on on the day of the year $t$

-   $\beta_0$ is an intercept

-   $f(\text{time}_t)$ is a temporal model, e.g., a RW2 model (this is just a smoother).

The smoothness is controlled by a hyperparameter $\tau_f$ . Thus, we assign a prior to $\tau_f$ to finalize the model.

We can fit the model as follows:

```{r}

# define model component
cmp =  ~ -1 + beta0(1) + time_effect(time, model = "rw2", cyclic = TRUE)

# define model predictor
eta = y ~ beta0 + time_effect

# build the observation model
lik = bru_obs(formula = eta,
              family = "binomial",
              Ntrials = n,
              data = Tokyo)

# fit the model
fit = bru(cmp, lik)
```


Notice that we have set `cyclic = TRUE` as this is a cyclic effect. Finally, we can produce model predictions in a similar fashion as we did before:


```{r}

pTokyo = predict(fit, Tokyo, ~ plogis(beta0 + time_effect))

ggplot(data=pTokyo , aes(x= time, y= y) ) +
  geom_point() + 
  ylab("") + xlab("") +
  # Custom the Y scales:
  scale_y_continuous(
    # Features of the first axis
    name = "",
    # Add a second axis and specify its features
    sec.axis = sec_axis( transform=~./2, name="Probability")
  )  + geom_line(aes(y=mean*2,x=time)) +
  geom_ribbon(aes( ymin = q0.025*2, 
                             ymax = q0.975*2), alpha = 0.5)
  
```
